import asyncio
import logging

import requests
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from telegram.ext import CommandHandler

from config import TOKEN_TG, CHAT_ID, ACCESS_KEY_UNSPLASH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ application –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
application = None


async def send_morning_image(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ."""
    image_url = get_images()
    if image_url:
        await context.send_photo(
            chat_id=CHAT_ID,
            photo=image_url,
            caption="–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåû\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–ª—ã–±–Ω—É—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è!\n–£–ö –ø–æ–º–Ω–∏—Ç –æ –í–∞—Å)",
        )
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é –∫–∞—Ä—Ç–∏–Ω–∫—É: URL –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def handle_fix_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É: 759659")


# === 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 10 —á–∏—Å–ª–∞ ===
async def send_monthly_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞–∂–¥–æ–µ 10 —á–∏—Å–ª–æ."""
    await context.bot.send_message(
        chat_id=CHAT_ID,
        text="üìÖ –°–µ–≥–æ–¥–Ω—è 10-–µ —á–∏—Å–ª–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤!",
    )


# === 3. –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def reply_to_phrases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã '–∫—É–¥–∞ –∑–≤–æ–Ω–∏—Ç—å' –∏ '–∫–æ–≥–¥–∞ –ø–æ—á–∏–Ω—è—Ç?'."""
    user_message = update.message.text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    if "–∫—É–¥–∞ –∑–≤–æ–Ω–∏—Ç—å" in user_message or "–∫–æ–≥–¥–∞ –ø–æ—á–∏–Ω—è—Ç" in user_message:
        await update.message.reply_text(
            "–î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû 759659"
        )


# === 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –†–∏—Ç–∞ ü§ñ. –ú–æ–≥—É:\n"
        "- –ü—Ä–∏—Å—ã–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üåÖ\n"
        "- –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å 10-–≥–æ —á–∏—Å–ª–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è üìä\n"
        "- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫—É–¥–∞ —Å–ª–µ–¥—É–µ—Ç –∑–≤–æ–Ω–∏—Ç—å."
    )


def setup_scheduler(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
    scheduler = BackgroundScheduler(timezone="Europe/Saratov")

    # –ó–∞–¥–∞—á–∞ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    scheduler.add_job(
        lambda: asyncio.run(send_morning_image(application.bot)),
        trigger="cron",
        hour=11,
        minute=17,
    )

    # –ó–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 10 —á–∏—Å–ª–∞
    scheduler.add_job(
        lambda: asyncio.run(send_monthly_reminder(application.bot)),
        trigger="cron",
        day=10,
        hour=9,
        minute=0,
    )

    scheduler.start()


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    global application  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = ApplicationBuilder().token(TOKEN_TG).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
    application.add_handler(MessageHandler(
        filters.Regex(r'(?i).*–æ—Ç–æ–ø–ª–µ–Ω–∏–µ.*–∫–æ–≥–¥–∞.*–ø–æ—á–∏–Ω—è—Ç\?.*'),  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—Ä–∞–∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
        handle_fix_request
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ "–∫—É–¥–∞ –∑–≤–æ–Ω–∏—Ç—å" –∏–ª–∏ "–∫–æ–≥–¥–∞ –ø–æ—á–∏–Ω—è—Ç"
    application.add_handler(
        MessageHandler(filters.TEXT, reply_to_phrases)
        # MessageHandler(filters.TEXT & ~filters.COMMAND, reply_to_phrases)
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    setup_scheduler(application)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


def get_images(width=1080):
    response = requests.get(
        f'https://api.unsplash.com/photos/random?query=winter+nature+animals+bright&client_id={ACCESS_KEY_UNSPLASH}'
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    if response.status_code == 200:
        image_url = response.json()['urls']['regular']
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —à–∏—Ä–∏–Ω—ã
        return f"{image_url}&w={width}"
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç Unsplash")
        return None


async def shutdown():
    global application
    await application.shutdown()
    await application.stop()
    await application.wait_closed()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        asyncio.run(shutdown())
