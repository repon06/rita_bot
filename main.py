import asyncio
import logging

import requests
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Update
from telegram.error import NetworkError
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from telegram.ext import CommandHandler

from config import TOKEN_TG, CHAT_ID, ACCESS_KEY_UNSPLASH, PHONE_AVARIA_UK, PHONE_SARATOV_VODOKANAL, PHONE_LIFT, \
    PHONE_T_PLUS, PHONE_UPRAV_UK, PHONE_DISPECHER_KIROVSKIY, PHONE_DISPECHER, PHONE_AO_SPGES, DAYS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
# logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

application = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


async def debug_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Text received in group: {update.message.text}")
    print(f"Message received: {update.message.text}")
    await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")


async def send_morning_image(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ."""
    image_url = get_images()
    if image_url:
        await context.send_photo(
            chat_id=CHAT_ID,
            photo=image_url,
            caption="–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåû\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–ª—ã–±–Ω—É—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è!\n–£–ö –ø–æ–º–Ω–∏—Ç –æ –í–∞—Å)",
        )
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é –∫–∞—Ä—Ç–∏–Ω–∫—É: URL –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def handle_fix_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É: {PHONE_AVARIA_UK}")


# === 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 10 —á–∏—Å–ª–∞ ===
async def send_monthly_reminder(context: ContextTypes.DEFAULT_TYPE, message: str):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤."""
    await context.bot.send_message(
        chat_id=CHAT_ID,
        text=message,
    )


# === 3. –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def reply_to_phrases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Received message: {update.message.text}")
    user_message = update.message.text.lower().strip()
    if not user_message:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if "–∫—É–¥–∞ –∑–≤–æ–Ω–∏—Ç—å" in user_message or "–∫–æ–≥–¥–∞ –ø–æ—á–∏–Ω—è—Ç" in user_message:
        await update.message.reply_text(f"–î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû\n"
                                        f"–ê–≤–∞—Ä–∏–π–Ω–æ-–¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ): {PHONE_AVARIA_UK}")
    elif "–≤–æ–¥–∞" in user_message or "–≤–æ–¥—ã" in user_message or "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ" in user_message:
        await update.message.reply_text(f"–î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû:\n"
                                        f"–ê–≤–∞—Ä–∏–π–Ω–æ-–¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ): {PHONE_AVARIA_UK}\n"
                                        f"–°–∞—Ä–∞—Ç–æ–≤–≤–æ–¥–æ–∫–∞–Ω–∞–ª: {PHONE_SARATOV_VODOKANAL}\n"
                                        f"–¢ –ü–ª—é—Å: {PHONE_T_PLUS}")
    elif "–ª–∏—Ñ—Ç" in user_message:
        await update.message.reply_text(f"–î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû\n"
                                        f"–ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞ –ª–∏—Ñ—Ç–æ–≤–∏–∫–æ–≤: {PHONE_LIFT}")
    elif "–∏–Ω–¥–µ–∫—Å" in user_message:
        await update.message.reply_text("–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞—à–µ–≥–æ –¥–æ–º–∞: 410082")
    elif " —Ä–∏—Ç–∞" in user_message or " —Ä–∏—Ç–µ" in user_message or " —Ä–∏—Ç—É" in user_message:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –†–∏—Ç–∞ ü§ñ. –ú–æ–≥—É:\n"
                                        "- –ü—Ä–∏—Å—ã–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üåÖ\n"
                                        "- –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å 10-15-20-–≥–æ —á–∏—Å–ª–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ üìä\n"
                                        "- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫—É–¥–∞ —Å–ª–µ–¥—É–µ—Ç –∑–≤–æ–Ω–∏—Ç—å.")
    elif "–ø–∞—Å–ø–æ—Ä—Ç–∏—Å—Ç" in user_message or "–æ—Ñ–∏—Å —É–∫" in user_message:
        await update.message.reply_text("–£–≤–∞–∂–∞–µ–º—ã–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏!\n"
                                        "–û—Ñ–∏—Å —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–µ—Ä–µ–µ—Ö–∞–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥.–°–∞—Ä–∞—Ç–æ–≤, —É–ª. –ò–º. –¢–∞—Ä—Ö–æ–≤–∞ –¥. 45–∞, –∫–≤. 99, —ç—Ç–∞–∂ 1, –¥–æ–º–æ—Ñ–æ–Ω ‚Ññ 99.\n"
                                        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –æ—Ñ–∏—Å–∞ - —Å 9:00 –¥–æ 18:00.\n"
                                        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–∞—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –æ—Å—Ç–∞–ª—Å—è —Ç–∞–∫–æ–π –∂–µ.\n"
                                        "–ü–Ω. –° 14:00 –¥–æ 18:00\n"
                                        "–ß—Ç. –° 9:00 –¥–æ 11:00")
    elif "—Å–≤–µ—Ç" in user_message or "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤" in user_message:
        await update.message.reply_text(
            f"–£—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–±–æ—è—Ö (–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏) —Ç–µ–ø–ª–æ-, –≤–æ–¥–æ-, —ç–ª–µ–∫—Ç—Ä–æ- –∏ –≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º üìû:\n"
            f"–î–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∏–π –ø—É–Ω–∫—Ç –ø–æ –ö–∏—Ä–æ–≤—Å–∫–æ–º—É —Ä–∞–π–æ–Ω—É: {PHONE_DISPECHER_KIROVSKIY}\n"
            f"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∏–π –ø—É–Ω–∫—Ç: {PHONE_DISPECHER}\n"
            f"–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –ê–û –°–ü–ì–≠–°: {PHONE_AO_SPGES}\n"
            f"–¢ –ü–ª—é—Å: {PHONE_T_PLUS}")
    if ("—É–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è" in user_message or "—É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏" in user_message
        or "—É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é" in user_message) or "–°–µ—Ä–≥–µ–π –§–µ–¥–æ—Ä–æ–≤–∏—á" in user_message:
        await update.message.reply_text(f"–£–≤–∞–∂–∞–µ–º—ã–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏!\n"
                                        "–û—Ñ–∏—Å —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–µ—Ä–µ–µ—Ö–∞–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥.–°–∞—Ä–∞—Ç–æ–≤, —É–ª. –ò–º. –¢–∞—Ä—Ö–æ–≤–∞ –¥. 45–∞, –∫–≤. 99, —ç—Ç–∞–∂ 1, –¥–æ–º–æ—Ñ–æ–Ω ‚Ññ 99.\n"
                                        f"–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –£–ö –°–µ—Ä–≥–µ–π –§–µ–¥–æ—Ä–æ–≤–∏—á: {PHONE_UPRAV_UK}")


# === 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –†–∏—Ç–∞ ü§ñ. –ú–æ–≥—É:\n"
        "- –ü—Ä–∏—Å—ã–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üåÖ\n"
        "- –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å 10-15-20-–≥–æ —á–∏—Å–ª–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ üìä\n"
        "- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫—É–¥–∞ —Å–ª–µ–¥—É–µ—Ç –∑–≤–æ–Ω–∏—Ç—å."
    )


def setup_scheduler(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
    scheduler = BackgroundScheduler(timezone="Europe/Saratov")

    # –ó–∞–¥–∞—á–∞ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    scheduler.add_job(
        lambda: asyncio.run(send_morning_image(application.bot)),
        trigger="cron",
        hour=9,
        minute=00,
    )

    for day in DAYS:
        scheduler.add_job(
            lambda: asyncio.run(
                send_monthly_reminder(application.bot,
                                      f"üìÖ –°–µ–≥–æ–¥–Ω—è {day}-–µ —á–∏—Å–ª–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤!")
            ),
            trigger="cron",
            day=day,
            hour=9,
            minute=5,
        )

    scheduler.start()


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    global application  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π

    application = ApplicationBuilder().token(TOKEN_TG).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT, reply_to_phrases))
    # application.add_handler(MessageHandler(filters.ALL, debug_messages))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    setup_scheduler(application)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # application.run_polling() # –∫–∞–∂–¥ 10 —Å–µ–∫
    application.run_polling(timeout=60)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.add_error_handler(handle_shutdown)


async def handle_shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∞–µ—Ç –±–æ—Ç–∞."""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if isinstance(context.error, NetworkError):
        await application.stop()
        await application.wait_closed()
    else:
        raise context.error


def get_images(width=1080):
    response = requests.get(
        f'https://api.unsplash.com/photos/random?query=winter+nature+animals+bright&client_id={ACCESS_KEY_UNSPLASH}'
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    if response.status_code == 200:
        image_url = response.json()['urls']['regular']
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —à–∏—Ä–∏–Ω—ã
        return f"{image_url}&w={width}"
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç Unsplash")
        return None


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
